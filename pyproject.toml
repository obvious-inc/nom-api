[tool.poetry]
name = "api"
version = "1.0.0"
description = ""
authors = ["New Shades DAO <dev@newshades.xyz>"]
license = "CC0-1.0"

[tool.poetry.dependencies]
python = "^3.9"
arrow = "^1.2"
asgi-lifespan = "^1.0"
boto3 = "^1.20.51"
coverage = "^6.3.2"
cffi = "^1.15"
cryptography = "^39.0.1"
dnspython = "^2.1"
eth-account = "^0.5"
eth-utils = "^1.10"
fastapi = "^0.92"
gunicorn = "^20.1"
hiredis = "^2.0.0"
httptools = "^0.3"
httpx = "0.23.0"
marshmallow = "^3.14"
motor = "^2.5"
mypy = "^0.931"
orjson = "^3.6"
pusher = "^3.1.0"
pyyaml = "^6.0"
pycparser = "^2.21"
pydantic = "^1.9"
pyinstrument = "^4.1.1"
pymongo = "^3.12"
python-dotenv = "^0.19"
python-jose = "^3.3"
python-multipart = "^0.0.5"
redis = "^4.2.2"
sentry-sdk = {extras = ["starlette", "fastapi", "pymongo"], version = "^1.17.0"}
types-python-dateutil = "^2.8.14"
types-redis = "^4.2.0"
types-requests = "^2.27.9"
umongo = "^3.1"
uvicorn = "^0.20"
uvloop = "^0.16"
watchgod = "^0.7"
web3 = "^5.26"
aioauth = "^1.5.0"
beautifulsoup4 = "^4.11.1"
lxml = "^4.9.1"
pytest = "^7.1.3"
pysha3 = "^1.0.2"
ruff = "^0.0.255"

[tool.poetry.dev-dependencies]
black = { version = "*", allow-prereleases = true }
isort = ">=5.10"
flake8 = ">=4.0"
flake8-black = ">=0.2"
flake8-isort = ">=4.1"
pre-commit = "^2.19.0"
pytest = "^7.1.3"
pytest-env = "^0.8.1"
pytest-asyncio = "^0.16"
pytest-cov = "^4.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target_version = ["py39"]
include = '\.pyi?$'
exclude = '\.git/|\.mypy_cache/|\.venv/|\.pytest_cache/|\.vscode/|__pycache__/'

[tool.isort]
profile = "black"
line_length = 120
known_first_party = "app"
skip = ".git,.mypy_cache,.venv,.pytest_cache,.vscode,__pycache__"

[tool.mypy]
ignore_missing_imports = true

[tool.coverage.run]
omit = ["*/test*"]
branch = true

[tool.coverage.report]
fail_under = 80
skip_empty = true
skip_covered = true
exclude_lines = [
    "if __name__ == .__main__.:",  # ignore main runs
    "if not settings.testing", # ignore production-specific setup
    "if settings.profiling", # ignore profiling
]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:The.+?(attribute of|argument to) fields is deprecated.:DeprecationWarning:marshmallow",
    "ignore:The.+?(attribute of|argument to) fields is deprecated.:DeprecationWarning:umongo",
    'ignore:"@coroutine" decorator is deprecated since Python 3.8, use "async def" instead:DeprecationWarning:pusher',
]
env = [
    "ENVIRONMENT = testing",
    "FEATURE_WHITELIST = 0"
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
max-complexity = 10
